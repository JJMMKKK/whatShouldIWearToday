1. postgre 권한 부여 문제
2. MemberPage.js 함수 효율화
3. 옷 출력 메서드의 비효율성(전체 옷 출력 + 현재 유저의 옷 출력 --> 현재 유저의 옷 출력으로 sql 변경)
4. updateClothes + ClothVO의 MemberVO 참조 문제
5. N+1 디버깅 필요(api를 호출할 경우 dto에서 userid가 초기화 될 때 LAZY 초기화가 되는 것을 알 수 있음 (지연 로딩은 영속성 컨택스트가 없는 경우 db에 쿼리를 날려 데이터를 받아오기 때문))
6. WeatherDataDTO의 Setter를 통한 데이터 변경의 타당성 검증(리소스 과다사용 여부 등)
7. 폼 데이터에 사용되는 데이터를 include 등의 작업을 통해 가시성 향상
8. country를 고르고 area를 고르는 방식으로 변경(확장성 고려)
9. 지역 명을 아스키 코드로 자동 변환하도록 설계
##10. delete & save -> saveAll
--> serial id로 인해 결국 deleteAll 후에 saveAll을 해야 제대로 들어가짐
--> 안 그러면 데이터 확인 -> 있으면 갱신 / 없으면 삽입이라는 과정을 사용해야 함(save를 사용해야 하는 것은 덤)
--> 그런데 데이터가 어차피 그렇게 많지 않으면 확인 후 갱신 / 삽입 과정을 거쳐도 좋지 않을까?

지금 당장은 delete & save를 사용하고 있지만 saveAll로 변환할 예정
saveAll에 사용되는 List는 flag컬럼이 null인 경우에만 포함되도록 변경할 것
또한 DB의 Table의 Id 역시 바꿔야 할 것이다. 숫자로 하던가, 아니면 다른 명칭을 사용하던가

11. 미세먼지DB와 place DB의 데이터가 불일치
12. include에 사용되는 jsp 코드 정보 정리
13. GPT 답변을 매일 6시간 간격으로 생성
    이후 정보 불러 올 때 최신 답변을 DB에서 불러옴
14. Kafka를 사용하여 모듈 간 통신(메시징 시스템 활용)
15. 공통 configuration 사용